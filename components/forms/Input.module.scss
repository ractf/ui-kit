@import "@ractf/ui-kit/Colours.scss";

.inputTags,
.input,
.textarea {
    background: none;
    border: 0;
    width: 100%;
    color: inherit;
    padding: map-get($input, "padding");
    line-height: map-get($input, "line_height");
    font-size: map-get($input, "font_size");
    min-height: inherit;

    &:focus {
        border: none;
        outline: none;
    }

    &.monospaced {
        font-family: $monoStack;
    }
}

.textarea {
    resize: vertical;
}

.inputTags,
.inputWrapper {
    ::-ms-reveal,
    ::-ms-clear {
        display: none;
    }

    position: relative;
    min-height: map-get($input, "min_height");

    font-size: 0;
    border-radius: map-get($input, "radius");

    background: map-get($input, "radius");
    color: map-get($input, "color");
    outline: none;

    border: map-get($input, "border");
    &:focus-within {
        border: map-get($input, "border_focus");

        .placeholder {
            opacity: 0.4;
        }

        > .lengthCounter {
            opacity: 0.7;
        }
    }

    &.center {
        text-align: center;
    }
    &.invalid {
        border: map-get($input, "border_error");
        color: map-get($input, "color_error");

        &:focus-within {
            border: map-get($input, "border_error_focus");
        }
    }
    &.password {
        input {
            padding-left: 50px;
        }
        .placeholder {
            padding-left: 50px;
        }
    }
    &.disabled {
        background-color: map-get($input, "background_disabled");
        color: map-get($input, "color_disabled");
        opacity: 0.5;
        cursor: not-allowed;
        input {
            cursor: not-allowed;
        }
    }
    &.hidden {
        display: none;
    }

    .lengthCounter {
        position: absolute;
        right: 8px;
        top: 8px;
        font-size: 0.7rem;
        opacity: 0.5;
        user-select: none;
    }
    .styledEye {
        position: absolute;
        top: 50%;
        width: 20px;
        height: 20px;
        left: 16px;
        font-size: 20px;
        transform: translateY(-50%);
        display: flex;
        align-items: center;
        cursor: pointer;

        opacity: 0.4;

        &:hover {
            opacity: 0.6;
        }
    }

    .placeholder {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        padding: inherit;
        text-align: left;
        color: inherit;
        opacity: 0.7;
        padding: map-get($input, "padding");
        line-height: map-get($input, "line_height");
        font-size: map-get($input, "font_size");
        display: flex;
        align-items: center;

        user-select: none;
        pointer-events: none;

        & > span {
            display: block;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
    }

    .inputStrength {
        position: absolute;
        height: 1px;
        background-color: #000;
        bottom: 0;
        left: 0;
        width: 100%;
        transition: width 200ms ease-out, color 200ms ease;

        &[data-val="0"] {
            width: 0%;
            background-color: map-get($colours, "red");
        }
        &[data-val="1"] {
            width: 25%;
            background-color: map-get($colours, "red");
        }
        &[data-val="2"] {
            width: 50%;
            background-color: map-get($colours, "orange");
        }
        &[data-val="3"] {
            width: 75%;
            background-color: map-get($colours, "yellow");
        }
        &[data-val="4"],
        &[data-val="5"] {
            width: 100%;
            background-color: map-get($colours, "green");
        }
    }
}

.inputGroup {
    display: flex;

    & > *:not(.inputWrapper) {
        padding: map-get($input, "padding");
        min-height: auto;
        min-width: auto;
        line-height: map-get($input, "line_height");
        font-size: map-get($input, "font_size") !important;
        height: auto;
    }

    & > * {
        margin: 0;

        &:not(:first-child):not(:last-child) {
            border-radius: 0;
        }
        &:first-child {
            border-radius: map-get($input, "radius") 0 0 map-get($input, "radius");
        }
        &:last-child {
            border-radius: 0 map-get($input, "radius") map-get($input, "radius") 0;
        }
    }

    &:focus-within {
        .inputHint {
            border: map-get($input, "border_focus");
        }
    }

    .igInput {
        flex-grow: 1;
        &:not(:first-child) {
            border-left: none;
        }
        &:not(:last-child) {
            border-right: none;
        }
    }
}

.inputHint {
    border: map-get($input, "border");
    background-color: map-get($input, "background_disabled");
    font-size: map-get($input, "font_size");
    padding: 0.7rem 18px;

    &.disabled {
        opacity: 0.5;
        color: map-get($input, "color_disabled");
    }
}
.disabled {
    .inputHint {
        opacity: 0.5;
        color: map-get($input, "color_disabled");
    }
}

.inputTags {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    padding: map-get($input, "tabsPadding");
    > * {
        margin: px(2.5) px(8) px(2.5) 0 ;
        flex-shrink: 0;
    }

    > input {
        margin-right: 0;
        flex-grow: 1;
        outline: none;
        background-color: transparent;
        border: none;
        color: inherit;
        font-size: map-get($input, "font_size");
    }
}
